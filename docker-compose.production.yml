version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: kin-cms-postgres
    environment:
      POSTGRES_DB: kin_workspace_cms
      POSTGRES_USER: cms_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - cms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cms_user -d kin_workspace_cms"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: kin-cms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cms-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CMS Application
  cms-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kin-cms-app
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://cms_user:${POSTGRES_PASSWORD}@postgres:5432/kin_workspace_cms
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      REDIS_URL: redis://redis:6379
      UPLOAD_DIR: /app/public/uploads
    ports:
      - "3001:3001"
    volumes:
      - uploads_data:/app/public/uploads
    networks:
      - cms-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: kin-cms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    networks:
      - cms-network
    depends_on:
      - cms-app
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  cms-network:
    driver: bridge