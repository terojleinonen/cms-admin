generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid()) @db.Uuid
  email            String             @unique @db.VarChar(255)
  passwordHash     String             @map("password_hash") @db.VarChar(255)
  name             String             @db.VarChar(255)
  role             UserRole           @default(EDITOR)
  isActive         Boolean            @default(true) @map("is_active")
  profilePicture   String?            @map("profile_picture") @db.VarChar(500)
  emailVerified    DateTime?          @map("email_verified")
  twoFactorSecret  String?            @map("two_factor_secret") @db.VarChar(255)
  twoFactorEnabled Boolean            @default(false) @map("two_factor_enabled")
  lastLoginAt      DateTime?          @map("last_login_at")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  
  // Relations
  preferences      UserPreferences?
  sessions         Session[]
  auditLogs        AuditLog[]
  backupCodes      BackupCode[]
  passwordResetTokens PasswordResetToken[]
  notifications    Notification[]
  emailLogs        EmailLog[]
  createdApiKeys   ApiKey[]           @relation("ApiKeyCreator")
  restoredBackups  BackupRestoreLog[] @relation("BackupRestorer")
  createdBackups   Backup[]           @relation("BackupCreator")
  contentRevisions ContentRevision[]
  createdMedia     Media[]            @relation("MediaCreator")
  createdPages     Page[]             @relation("PageCreator")
  createdProducts  Product[]          @relation("ProductCreator")

  @@map("users")
}

model Category {
  id          String            @id @default(uuid()) @db.Uuid
  name        String            @db.VarChar(255)
  slug        String            @unique @db.VarChar(255)
  description String?
  parentId    String?           @map("parent_id") @db.Uuid
  sortOrder   Int               @default(0) @map("sort_order")
  isActive    Boolean           @default(true) @map("is_active")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  parent      Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]        @relation("CategoryHierarchy")
  products    ProductCategory[]

  @@map("categories")
}

model Product {
  id                String            @id @default(uuid()) @db.Uuid
  name              String            @db.VarChar(255)
  slug              String            @unique @db.VarChar(255)
  description       String?
  shortDescription  String?           @map("short_description")
  price             Decimal           @db.Decimal(10, 2)
  comparePrice      Decimal?          @map("compare_price") @db.Decimal(10, 2)
  sku               String?           @unique @db.VarChar(100)
  inventoryQuantity Int               @default(0) @map("inventory_quantity")
  weight            Decimal?          @db.Decimal(8, 2)
  dimensions        Json?
  status            ProductStatus     @default(DRAFT)
  featured          Boolean           @default(false)
  seoTitle          String?           @map("seo_title") @db.VarChar(255)
  seoDescription    String?           @map("seo_description")
  createdBy         String            @map("created_by") @db.Uuid
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  categories        ProductCategory[]
  media             ProductMedia[]
  creator           User              @relation("ProductCreator", fields: [createdBy], references: [id])

  @@map("products")
}

model ProductCategory {
  productId  String   @map("product_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Media {
  id           String         @id @default(uuid()) @db.Uuid
  filename     String         @db.VarChar(255)
  originalName String         @map("original_name") @db.VarChar(255)
  mimeType     String         @map("mime_type") @db.VarChar(100)
  fileSize     Int            @map("file_size")
  width        Int?
  height       Int?
  altText      String?        @map("alt_text") @db.VarChar(255)
  folder       String         @default("uploads") @db.VarChar(255)
  createdBy    String         @map("created_by") @db.Uuid
  createdAt    DateTime       @default(now()) @map("created_at")
  creator      User           @relation("MediaCreator", fields: [createdBy], references: [id])
  products     ProductMedia[]

  @@map("media")
}

model ProductMedia {
  productId String  @map("product_id") @db.Uuid
  mediaId   String  @map("media_id") @db.Uuid
  sortOrder Int     @default(0) @map("sort_order")
  isPrimary Boolean @default(false) @map("is_primary")
  media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, mediaId])
  @@map("product_media")
}

model Page {
  id             String     @id @default(uuid()) @db.Uuid
  title          String     @db.VarChar(255)
  slug           String     @unique @db.VarChar(255)
  content        String?
  excerpt        String?
  status         PageStatus @default(DRAFT)
  template       String     @default("default") @db.VarChar(100)
  seoTitle       String?    @map("seo_title") @db.VarChar(255)
  seoDescription String?    @map("seo_description")
  publishedAt    DateTime?  @map("published_at")
  createdBy      String     @map("created_by") @db.Uuid
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  creator        User       @relation("PageCreator", fields: [createdBy], references: [id])

  @@map("pages")
}

model ContentRevision {
  id           String   @id @default(uuid()) @db.Uuid
  contentType  String   @map("content_type") @db.VarChar(50)
  contentId    String   @map("content_id") @db.Uuid
  revisionData Json     @map("revision_data")
  createdBy    String   @map("created_by") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")
  creator      User     @relation(fields: [createdBy], references: [id])

  @@map("content_revisions")
}

model ApiKey {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(255)
  keyHash     String        @unique @map("key_hash") @db.VarChar(64)
  permissions String[]      @db.VarChar(100)
  isActive    Boolean       @default(true) @map("is_active")
  lastUsed    DateTime?     @map("last_used")
  createdBy   String        @map("created_by") @db.Uuid
  createdAt   DateTime      @default(now()) @map("created_at")
  expiresAt   DateTime?     @map("expires_at")
  creator     User          @relation("ApiKeyCreator", fields: [createdBy], references: [id])
  usageLogs   ApiUsageLog[]

  @@map("api_keys")
}

model ApiUsageLog {
  id           String   @id @default(uuid()) @db.Uuid
  apiKeyId     String   @map("api_key_id") @db.Uuid
  endpoint     String   @db.VarChar(255)
  method       String   @db.VarChar(10)
  statusCode   Int      @map("status_code")
  responseTime Int      @map("response_time")
  userAgent    String?  @map("user_agent")
  ipAddress    String?  @map("ip_address") @db.VarChar(45)
  timestamp    DateTime @default(now())
  apiKey       ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@map("api_usage_logs")
}

model Backup {
  id          String             @id @default(uuid()) @db.Uuid
  type        String             @db.VarChar(20)
  filename    String             @db.VarChar(255)
  size        BigInt
  compressed  Boolean            @default(false)
  encrypted   Boolean            @default(false)
  checksum    String             @db.VarChar(64)
  version     String             @db.VarChar(20)
  description String?
  createdBy   String             @map("created_by") @db.Uuid
  createdAt   DateTime           @default(now()) @map("created_at")
  restoreLogs BackupRestoreLog[]
  creator     User               @relation("BackupCreator", fields: [createdBy], references: [id])

  @@map("backups")
}

model BackupRestoreLog {
  id         String   @id @default(uuid()) @db.Uuid
  backupId   String   @map("backup_id") @db.Uuid
  restoredBy String   @map("restored_by") @db.Uuid
  restoredAt DateTime @default(now()) @map("restored_at")
  backup     Backup   @relation(fields: [backupId], references: [id], onDelete: Cascade)
  restorer   User     @relation("BackupRestorer", fields: [restoredBy], references: [id])

  @@map("backup_restore_logs")
}

model SearchEvent {
  id           String    @id @default(uuid()) @db.Uuid
  query        String    @db.VarChar(255)
  resultsCount Int       @map("results_count")
  userId       String?   @map("user_id") @db.Uuid
  filters      Json?
  userAgent    String?   @map("user_agent")
  ipAddress    String?   @map("ip_address") @db.VarChar(45)
  createdAt    DateTime  @default(now()) @map("created_at")

  @@map("search_events")
}

model UserPreferences {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @unique @map("user_id") @db.Uuid
  theme        Theme    @default(SYSTEM)
  timezone     String   @default("UTC") @db.VarChar(50)
  language     String   @default("en") @db.VarChar(10)
  notifications Json    @default("{\"email\": true, \"push\": true, \"security\": true, \"marketing\": false}")
  dashboard    Json     @default("{\"layout\": \"default\", \"widgets\": [], \"defaultView\": \"dashboard\"}")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  action    String   @db.VarChar(100)
  resource  String   @db.VarChar(100)
  details   Json?
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model BackupCode {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  code      String   @db.VarChar(64) // Hashed backup code
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([code])
  @@map("backup_codes")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash") @db.VarChar(64)
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  ipAddress String?  @map("ip_address") @db.VarChar(45)
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType
  title     String           @db.VarChar(255)
  message   String           @db.Text
  data      Json?            // Additional data for the notification
  read      Boolean          @default(false)
  readAt    DateTime?        @map("read_at")
  createdAt DateTime         @default(now()) @map("created_at")
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationTemplate {
  id          String           @id @default(uuid()) @db.Uuid
  type        NotificationType
  language    String           @default("en") @db.VarChar(10)
  subject     String           @db.VarChar(255)
  emailBody   String?          @map("email_body") @db.Text
  inAppTitle  String           @map("in_app_title") @db.VarChar(255)
  inAppBody   String           @map("in_app_body") @db.Text
  variables   String[]         // List of available template variables
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@unique([type, language])
  @@map("notification_templates")
}

model EmailLog {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String?   @map("user_id") @db.Uuid
  to          String    @db.VarChar(255)
  subject     String    @db.VarChar(255)
  body        String    @db.Text
  type        NotificationType?
  status      EmailStatus @default(PENDING)
  error       String?   @db.Text
  sentAt      DateTime? @map("sent_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@map("email_logs")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

// Custom types for JSON fields - these will be handled as Json in Prisma but typed in TypeScript
// NotificationSettings: { email: boolean, push: boolean, security: boolean, marketing: boolean }
// DashboardSettings: { layout: string, widgets: string[], defaultView: string }

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PageStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum NotificationType {
  SECURITY_ALERT
  PASSWORD_CHANGED
  EMAIL_CHANGED
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  LOGIN_FROM_NEW_DEVICE
  PROFILE_UPDATED
  PREFERENCES_UPDATED
  ACCOUNT_DEACTIVATED
  ACCOUNT_REACTIVATED
  ROLE_CHANGED
  ADMIN_MESSAGE
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}
