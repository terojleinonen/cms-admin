{
  "timestamp": "2025-10-07T19:11:15.715Z",
  "totalTests": 11,
  "totalPassed": 0,
  "totalFailed": 11,
  "totalSkipped": 0,
  "totalDuration": 33758,
  "testResults": [
    {
      "testSuite": "Automated Security Scanner",
      "passed": 0,
      "failed": 1,
      "skipped": 0,
      "duration": 2866,
      "vulnerabilities": [],
      "errors": [
        "Error running __tests__/security/automated-security-scanner.test.ts: SyntaxError: Unexpected token '>', \"\n> kin-work\"... is not valid JSON"
      ]
    },
    {
      "testSuite": "Permission Boundary Penetration",
      "passed": 0,
      "failed": 1,
      "skipped": 0,
      "duration": 4274,
      "vulnerabilities": [],
      "errors": [
        "Error running __tests__/security/permission-boundary-penetration.test.ts: Error: Command failed: npm test -- --testPathPatterns=\"__tests__/security/permission-boundary-penetration.test.ts\" --verbose --json\nFAIL unit __tests__/security/permission-boundary-penetration.test.ts\n  Permission Boundary Penetration Testing\n    Horizontal Privilege Escalation\n      ✕ should prevent users from accessing other users data (16 ms)\n      ✕ should prevent users from accessing other users profiles (1 ms)\n      ✕ should prevent users from modifying other users data (2 ms)\n    Vertical Privilege Escalation\n      ✕ should prevent viewers from performing editor actions (8 ms)\n      ✕ should prevent editors from performing admin actions\n      ✕ should prevent role self-elevation\n    Resource Boundary Violations\n      ✕ should prevent access to resources outside user scope\n      ✕ should prevent bulk operations without proper permissions (1 ms)\n      ✕ should prevent access to audit logs without admin role (1 ms)\n    API Endpoint Boundary Testing\n      ✕ should test all API endpoints for proper permission enforcement (2 ms)\n      ✕ should prevent parameter tampering in API requests (1 ms)\n    Session and Token Boundary Testing\n      ✕ should prevent session hijacking attempts (2 ms)\n      ✕ should prevent token replay attacks (1 ms)\n      ✕ should prevent cross-site request forgery (1 ms)\n\n  ● Permission Boundary Penetration Testing › Horizontal Privilege Escalation › should prevent users from accessing other users data\n\n    TypeError: Failed to parse URL from /api/products/test-product-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      36 |\n      37 |       // User1 attempts to access user2's product\n    > 38 |       const response = await fetch(`/api/products/${product.id}`, {\n         |                              ^\n      39 |         method: 'PUT',\n      40 |         headers: {\n      41 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:38:30)\n\n  ● Permission Boundary Penetration Testing › Horizontal Privilege Escalation › should prevent users from accessing other users profiles\n\n    TypeError: Failed to parse URL from /api/users/test-user-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      65 |\n      66 |       // User1 attempts to access user2's profile\n    > 67 |       const response = await fetch(`/api/users/${user2.id}`, {\n         |                              ^\n      68 |         headers: {\n      69 |           'Authorization': `Bearer ${session1.accessToken}`\n      70 |         }\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:67:30)\n\n  ● Permission Boundary Penetration Testing › Horizontal Privilege Escalation › should prevent users from modifying other users data\n\n    TypeError: Failed to parse URL from /api/users/test-user-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      80 |\n      81 |       // User1 attempts to modify user2's profile\n    > 82 |       const response = await fetch(`/api/users/${user2.id}`, {\n         |                              ^\n      83 |         method: 'PUT',\n      84 |         headers: {\n      85 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:82:30)\n\n  ● Permission Boundary Penetration Testing › Vertical Privilege Escalation › should prevent viewers from performing editor actions\n\n    TypeError: Failed to parse URL from /api/products\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      109 |\n      110 |       // Attempt to create product (editor action)\n    > 111 |       const response = await fetch('/api/products', {\n          |                              ^\n      112 |         method: 'POST',\n      113 |         headers: {\n      114 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:111:30)\n\n  ● Permission Boundary Penetration Testing › Vertical Privilege Escalation › should prevent editors from performing admin actions\n\n    TypeError: Failed to parse URL from /api/admin/users\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      137 |\n      138 |       // Attempt to access admin user management\n    > 139 |       const response = await fetch('/api/admin/users', {\n          |                              ^\n      140 |         headers: {\n      141 |           'Authorization': `Bearer ${session.accessToken}`\n      142 |         }\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:139:30)\n\n  ● Permission Boundary Penetration Testing › Vertical Privilege Escalation › should prevent role self-elevation\n\n    TypeError: Failed to parse URL from /api/users/test-user-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      151 |\n      152 |       // Attempt to elevate own role to admin\n    > 153 |       const response = await fetch(`/api/users/${editor.id}`, {\n          |                              ^\n      154 |         method: 'PUT',\n      155 |         headers: {\n      156 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:153:30)\n\n  ● Permission Boundary Penetration Testing › Resource Boundary Violations › should prevent access to resources outside user scope\n\n    TypeError: Failed to parse URL from /api/admin/database\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      186 |\n      187 |       for (const endpoint of systemEndpoints) {\n    > 188 |         const response = await fetch(endpoint, {\n          |                                ^\n      189 |           headers: {\n      190 |             'Authorization': `Bearer ${session.accessToken}`\n      191 |           }\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:188:32)\n\n  ● Permission Boundary Penetration Testing › Resource Boundary Violations › should prevent bulk operations without proper permissions\n\n    TypeError: Failed to parse URL from /api/products/bulk-delete\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      201 |\n      202 |       // Attempt bulk delete\n    > 203 |       const response = await fetch('/api/products/bulk-delete', {\n          |                              ^\n      204 |         method: 'DELETE',\n      205 |         headers: {\n      206 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:203:30)\n\n  ● Permission Boundary Penetration Testing › Resource Boundary Violations › should prevent access to audit logs without admin role\n\n    TypeError: Failed to parse URL from /api/audit-logs\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      226 |\n      227 |       for (const endpoint of auditEndpoints) {\n    > 228 |         const response = await fetch(endpoint, {\n          |                                ^\n      229 |           headers: {\n      230 |             'Authorization': `Bearer ${session.accessToken}`\n      231 |           }\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:228:32)\n\n  ● Permission Boundary Penetration Testing › API Endpoint Boundary Testing › should test all API endpoints for proper permission enforcement\n\n    TypeError: Failed to parse URL from /api/products\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      255 |\n      256 |         for (const endpoint of endpoints) {\n    > 257 |           const response = await fetch(endpoint.path, {\n          |                                  ^\n      258 |             method: endpoint.method,\n      259 |             headers: {\n      260 |               'Authorization': `Bearer ${session.accessToken}`,\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:257:34)\n\n  ● Permission Boundary Penetration Testing › API Endpoint Boundary Testing › should prevent parameter tampering in API requests\n\n    TypeError: Failed to parse URL from /api/user/preferences\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      290 |\n      291 |       for (const attempt of tamperingAttempts) {\n    > 292 |         const response = await fetch('/api/user/preferences', {\n          |                                ^\n      293 |           method: 'PUT',\n      294 |           headers: {\n      295 |             'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:292:32)\n\n  ● Permission Boundary Penetration Testing › Session and Token Boundary Testing › should prevent session hijacking attempts\n\n    TypeError: Failed to parse URL from /api/users/test-user-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      313 |\n      314 |       // Attempt to use admin session with viewer user ID\n    > 315 |       const response = await fetch(`/api/users/${user2.id}`, {\n          |                              ^\n      316 |         method: 'PUT',\n      317 |         headers: {\n      318 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:315:30)\n\n  ● Permission Boundary Penetration Testing › Session and Token Boundary Testing › should prevent token replay attacks\n\n    TypeError: Failed to parse URL from /api/products\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      334 |\n      335 |       // Make initial request\n    > 336 |       const response1 = await fetch('/api/products', {\n          |                               ^\n      337 |         headers: {\n      338 |           'Authorization': `Bearer ${session.accessToken}`\n      339 |         }\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:336:31)\n\n  ● Permission Boundary Penetration Testing › Session and Token Boundary Testing › should prevent cross-site request forgery\n\n    TypeError: Failed to parse URL from /api/products\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      361 |\n      362 |       // Attempt CSRF attack without proper headers\n    > 363 |       const response = await fetch('/api/products', {\n          |                              ^\n      364 |         method: 'POST',\n      365 |         headers: {\n      366 |           'Authorization': `Bearer ${session.accessToken}`,\n\n      at Object.<anonymous> (__tests__/security/permission-boundary-penetration.test.ts:363:30)\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 14 total\nSnapshots:   0 total\nTime:        3.169 s\nRan all test suites matching __tests__/security/permission-boundary-penetration.test.ts.\n"
      ]
    },
    {
      "testSuite": "Security Regression Testing",
      "passed": 0,
      "failed": 1,
      "skipped": 0,
      "duration": 3068,
      "vulnerabilities": [],
      "errors": [
        "Error running __tests__/security/security-regression-testing.test.ts: Error: Command failed: npm test -- --testPathPatterns=\"__tests__/security/security-regression-testing.test.ts\" --verbose --json\nFAIL unit __tests__/security/security-regression-testing.test.ts\n  Security Regression Testing\n    Authentication Regression Tests\n      ✕ should prevent authentication bypass via header manipulation (Issue #001) (3 ms)\n      ✕ should prevent session fixation attacks (Issue #002)\n      ✕ should prevent password reset token reuse (Issue #003) (2 ms)\n    Authorization Regression Tests\n      ✕ should prevent role elevation via request manipulation (Issue #004) (2 ms)\n      ✕ should prevent permission cache poisoning (Issue #005) (1 ms)\n      ✕ should prevent IDOR via predictable resource IDs (Issue #006) (1 ms)\n    Input Validation Regression Tests\n      ✕ should prevent SQL injection in search parameters (Issue #007) (1 ms)\n      ✕ should prevent XSS in user-generated content (Issue #008)\n      ✕ should prevent path traversal in file operations (Issue #009) (1 ms)\n    Rate Limiting Regression Tests\n      ✕ should prevent rate limit bypass via header manipulation (Issue #010) (5 ms)\n      ✕ should prevent distributed rate limit bypass (Issue #011) (14 ms)\n    Session Management Regression Tests\n      ✕ should prevent concurrent session abuse (Issue #012) (2 ms)\n      ✕ should prevent session token prediction (Issue #013) (2 ms)\n    Data Exposure Regression Tests\n      ✕ should prevent sensitive data leakage in API responses (Issue #014) (1 ms)\n      ✕ should prevent information disclosure in error messages (Issue #015)\n\n  ● Security Regression Testing › Authentication Regression Tests › should prevent authentication bypass via header manipulation (Issue #001)\n\n    TypeError: Failed to parse URL from /api/admin/users\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      30 |\n      31 |       for (const headers of bypassHeaders) {\n    > 32 |         const response = await fetch('/api/admin/users', { headers })\n         |                                ^\n      33 |         expect([401, 403]).toContain(response.status)\n      34 |       }\n      35 |     })\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:32:32)\n\n  ● Security Regression Testing › Authentication Regression Tests › should prevent session fixation attacks (Issue #002)\n\n    TypeError: Failed to parse URL from /api/auth/login\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      39 |       const fixedSessionId = 'fixed-session-123'\n      40 |       \n    > 41 |       const response = await fetch('/api/auth/login', {\n         |                              ^\n      42 |         method: 'POST',\n      43 |         headers: {\n      44 |           'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:41:30)\n\n  ● Security Regression Testing › Authentication Regression Tests › should prevent password reset token reuse (Issue #003)\n\n    TypeError: Failed to parse URL from /api/auth/password-reset\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      63 |       \n      64 |       // Request password reset\n    > 65 |       const resetResponse = await fetch('/api/auth/password-reset', {\n         |                                   ^\n      66 |         method: 'POST',\n      67 |         headers: { 'Content-Type': 'application/json' },\n      68 |         body: JSON.stringify({ email: user.email })\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:65:35)\n\n  ● Security Regression Testing › Authorization Regression Tests › should prevent role elevation via request manipulation (Issue #004)\n\n    TypeError: Failed to parse URL from /api/users/test-user-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      111 |\n      112 |       for (const attempt of elevationAttempts) {\n    > 113 |         const response = await fetch(`/api/users/${editor.id}`, {\n          |                                ^\n      114 |           method: 'PUT',\n      115 |           headers: {\n      116 |             'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:113:32)\n\n  ● Security Regression Testing › Authorization Regression Tests › should prevent permission cache poisoning (Issue #005)\n\n    TypeError: Failed to parse URL from /api/admin/users\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      139 |\n      140 |       // Admin makes request to cache admin permissions\n    > 141 |       const adminResponse = await fetch('/api/admin/users', {\n          |                                   ^\n      142 |         headers: { 'Authorization': `Bearer ${adminSession.accessToken}` }\n      143 |       })\n      144 |       expect(adminResponse.status).toBe(200)\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:141:35)\n\n  ● Security Regression Testing › Authorization Regression Tests › should prevent IDOR via predictable resource IDs (Issue #006)\n\n    TypeError: Failed to parse URL from /api/products/test-product-id\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      171 |\n      172 |       // User1 attempts to access user2's resource by ID\n    > 173 |       const response = await fetch(`/api/products/${product.id}`, {\n          |                              ^\n      174 |         method: 'DELETE',\n      175 |         headers: { 'Authorization': `Bearer ${session1.accessToken}` }\n      176 |       })\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:173:30)\n\n  ● Security Regression Testing › Input Validation Regression Tests › should prevent SQL injection in search parameters (Issue #007)\n\n    TypeError: Failed to parse URL from /api/products?search='%3B%20DROP%20TABLE%20users%3B%20--\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      199 |\n      200 |       for (const injection of injectionAttempts) {\n    > 201 |         const response = await fetch(`/api/products?search=${encodeURIComponent(injection)}`, {\n          |                                ^\n      202 |           headers: { 'Authorization': `Bearer ${session.accessToken}` }\n      203 |         })\n      204 |\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:201:32)\n\n  ● Security Regression Testing › Input Validation Regression Tests › should prevent XSS in user-generated content (Issue #008)\n\n    TypeError: Failed to parse URL from /api/products\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      225 |\n      226 |       for (const payload of xssPayloads) {\n    > 227 |         const response = await fetch('/api/products', {\n          |                                ^\n      228 |           method: 'POST',\n      229 |           headers: {\n      230 |             'Content-Type': 'application/json',\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:227:32)\n\n  ● Security Regression Testing › Input Validation Regression Tests › should prevent path traversal in file operations (Issue #009)\n\n    TypeError: Failed to parse URL from /api/media/upload\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      261 |\n      262 |       for (const path of traversalAttempts) {\n    > 263 |         const response = await fetch('/api/media/upload', {\n          |                                ^\n      264 |           method: 'POST',\n      265 |           headers: {\n      266 |             'Authorization': `Bearer ${session.accessToken}`,\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:263:32)\n\n  ● Security Regression Testing › Rate Limiting Regression Tests › should prevent rate limit bypass via header manipulation (Issue #010)\n\n    TypeError: Failed to parse URL from /api/auth/login\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      288 |       for (const headers of bypassHeaders) {\n      289 |         const requests = Array.from({ length: 50 }, () =>\n    > 290 |           fetch('/api/auth/login', {\n          |           ^\n      291 |             method: 'POST',\n      292 |             headers: {\n      293 |               'Content-Type': 'application/json',\n\n      at __tests__/security/security-regression-testing.test.ts:290:11\n          at Array.from (<anonymous>)\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:289:32)\n\n  ● Security Regression Testing › Rate Limiting Regression Tests › should prevent distributed rate limit bypass (Issue #011)\n\n    TypeError: Failed to parse URL from /api/auth/login\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      320 |       for (const userAgent of userAgents) {\n      321 |         const requests = Array.from({ length: 30 }, () =>\n    > 322 |           fetch('/api/auth/login', {\n          |           ^\n      323 |             method: 'POST',\n      324 |             headers: {\n      325 |               'Content-Type': 'application/json',\n\n      at __tests__/security/security-regression-testing.test.ts:322:11\n          at Array.from (<anonymous>)\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:321:32)\n\n  ● Security Regression Testing › Session Management Regression Tests › should prevent concurrent session abuse (Issue #012)\n\n    TypeError: Failed to parse URL from /api/products\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      350 |       // Attempt to use multiple sessions simultaneously\n      351 |       const requests = sessions.map(session =>\n    > 352 |         fetch('/api/products', {\n          |         ^\n      353 |           headers: { 'Authorization': `Bearer ${session.accessToken}` }\n      354 |         })\n      355 |       )\n\n      at __tests__/security/security-regression-testing.test.ts:352:9\n          at Array.map (<anonymous>)\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:351:33)\n\n  ● Security Regression Testing › Session Management Regression Tests › should prevent session token prediction (Issue #013)\n\n    expect(received).not.toBe(expected) // Object.is equality\n\n    Expected: not undefined\n\n      376 |       for (let i = 0; i < tokens.length - 1; i++) {\n      377 |         for (let j = i + 1; j < tokens.length; j++) {\n    > 378 |           expect(tokens[i]).not.toBe(tokens[j])\n          |                                 ^\n      379 |           \n      380 |           // Check for sequential patterns\n      381 |           const token1Numeric = tokens[i].replace(/\\D/g, '')\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:378:33)\n\n  ● Security Regression Testing › Data Exposure Regression Tests › should prevent sensitive data leakage in API responses (Issue #014)\n\n    TypeError: Failed to parse URL from /api/users\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      397 |       const session = createMockSession(admin)\n      398 |\n    > 399 |       const response = await fetch('/api/users', {\n          |                              ^\n      400 |         headers: { 'Authorization': `Bearer ${session.accessToken}` }\n      401 |       })\n      402 |\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:399:30)\n\n  ● Security Regression Testing › Data Exposure Regression Tests › should prevent information disclosure in error messages (Issue #015)\n\n    TypeError: Failed to parse URL from /api/users/999999\n\n\n    Cause:\n    TypeError: Invalid URL\n\n      415 |     it('should prevent information disclosure in error messages (Issue #015)', async () => {\n      416 |       // Regression test for information disclosure vulnerability\n    > 417 |       const response = await fetch('/api/users/999999')\n          |                              ^\n      418 |       const error = await response.json()\n      419 |\n      420 |       // Error messages should not reveal system internals\n\n      at Object.<anonymous> (__tests__/security/security-regression-testing.test.ts:417:30)\n\nTest Suites: 1 failed, 1 total\nTests:       15 failed, 15 total\nSnapshots:   0 total\nTime:        1.104 s\nRan all test suites matching __tests__/security/security-regression-testing.test.ts.\n"
      ]
    },
    {
      "testSuite": "API Security Tests",
      "passed": 0,
      "failed": 3,
      "skipped": 0,
      "duration": 9302,
      "vulnerabilities": [],
      "errors": [
        "Error running __tests__/lib/api-security.test.ts: SyntaxError: Unexpected token '>', \"\n> kin-work\"... is not valid JSON",
        "Error running __tests__/lib/csrf-protection.test.ts: Error: Command failed: npm test -- --testPathPatterns=\"__tests__/lib/csrf-protection.test.ts\" --verbose --json\nFAIL unit __tests__/lib/csrf-protection.test.ts\n  CSRFProtection\n    generateToken\n      ✓ should generate a valid token (4 ms)\n      ✓ should generate unique tokens (1 ms)\n      ✓ should store token data internally (1 ms)\n    validateToken\n      ✓ should validate a valid token (1 ms)\n      ✓ should reject missing token (1 ms)\n      ✓ should reject malformed token (1 ms)\n      ✕ should reject token with invalid signature (4 ms)\n      ✓ should reject token for wrong session (1 ms)\n      ✓ should reject expired token (1 ms)\n      ✓ should validate token with request context (1 ms)\n    invalidateToken\n      ✓ should invalidate a specific token (1 ms)\n      ✓ should return false for invalid token\n    invalidateSessionTokens\n      ✓ should invalidate all tokens for a session (1 ms)\n    getTokenFromRequest\n      ✓ should get token from x-csrf-token header\n      ✓ should get token from cookie as fallback (1 ms)\n      ✓ should prefer header over cookie (1 ms)\n      ✕ should return null if no token found (1 ms)\n    middleware\n      ✓ should allow GET requests by default (1 ms)\n      ✓ should require CSRF token for POST requests (2 ms)\n      ✓ should validate CSRF token for POST requests (1 ms)\n      ✓ should reject invalid CSRF token (1 ms)\n      ✓ should skip specified paths\n      ✓ should validate double-submit cookie when required\n      ✓ should reject mismatched double-submit cookie (1 ms)\n    createTokenResponse\n      ✕ should create a valid token response (1 ms)\n      ✕ should set secure cookie\n    getStats\n      ✓ should return accurate statistics (1 ms)\n      ✓ should count expired tokens (1 ms)\n    convenience functions\n      ✓ should export convenience functions\n      ✓ should work as expected (1 ms)\n\n  ● CSRFProtection › validateToken › should reject token with invalid signature\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: \"Invalid signature\"\n    Received: \"Validation error\"\n\n      150 |       const result = await CSRFProtection.validateToken(tamperedToken, sessionId)\n      151 |       expect(result.valid).toBe(false)\n    > 152 |       expect(result.reason).toBe('Invalid signature')\n          |                             ^\n      153 |     })\n      154 |\n      155 |     it('should reject token for wrong session', async () => {\n\n      at Object.<anonymous> (__tests__/lib/csrf-protection.test.ts:152:29)\n\n  ● CSRFProtection › getTokenFromRequest › should return null if no token found\n\n    expect(received).toBeNull()\n\n    Received: undefined\n\n      270 |       \n      271 |       const result = CSRFProtection.getTokenFromRequest(request)\n    > 272 |       expect(result).toBeNull()\n          |                      ^\n      273 |     })\n      274 |   })\n      275 |\n\n      at Object.<anonymous> (__tests__/lib/csrf-protection.test.ts:272:22)\n\n  ● CSRFProtection › createTokenResponse › should create a valid token response\n\n    TypeError: Cannot read properties of undefined (reading 'set')\n\n      284 |\n      285 |     // Set cookie for double-submit protection\n    > 286 |     response.cookies.set('csrf-token', token, {\n          |                      ^\n      287 |       httpOnly: false, // Needs to be accessible to JavaScript\n      288 |       secure: process.env.NODE_ENV === 'production',\n      289 |       sameSite: 'strict',\n\n      at CSRFProtection.createTokenResponse (app/lib/csrf-protection.ts:286:22)\n      at Object.<anonymous> (__tests__/lib/csrf-protection.test.ts:395:39)\n\n  ● CSRFProtection › createTokenResponse › should set secure cookie\n\n    TypeError: Cannot read properties of undefined (reading 'set')\n\n      284 |\n      285 |     // Set cookie for double-submit protection\n    > 286 |     response.cookies.set('csrf-token', token, {\n          |                      ^\n      287 |       httpOnly: false, // Needs to be accessible to JavaScript\n      288 |       secure: process.env.NODE_ENV === 'production',\n      289 |       sameSite: 'strict',\n\n      at CSRFProtection.createTokenResponse (app/lib/csrf-protection.ts:286:22)\n      at Object.<anonymous> (__tests__/lib/csrf-protection.test.ts:409:39)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 26 passed, 30 total\nSnapshots:   0 total\nTime:        1.041 s\nRan all test suites matching __tests__/lib/csrf-protection.test.ts.\n",
        "Error running __tests__/lib/input-validation.test.ts: SyntaxError: Unexpected token '>', \"\n> kin-work\"... is not valid JSON"
      ]
    },
    {
      "testSuite": "Authentication Security",
      "passed": 0,
      "failed": 2,
      "skipped": 0,
      "duration": 5663,
      "vulnerabilities": [],
      "errors": [
        "Error running __tests__/integration/authentication-flow-integration.test.ts: Error: Command failed: npm test -- --testPathPatterns=\"__tests__/integration/authentication-flow-integration.test.ts\" --verbose --json\n  console.error\n    Failed to create audit log: ZodError: [\n      {\n        \"origin\": \"string\",\n        \"code\": \"invalid_format\",\n        \"format\": \"uuid\",\n        \"pattern\": \"/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/\",\n        \"path\": [\n          \"userId\"\n        ],\n        \"message\": \"Invalid UUID\"\n      }\n    ]\n        at AuditService.log (/Users/teroleinonen/software projects/cms-admin/app/lib/audit-service.ts:127:51)\n        at AuditService.logAuth (/Users/teroleinonen/software projects/cms-admin/app/lib/audit-service.ts:188:17)\n        at loginHandler (/Users/teroleinonen/software projects/cms-admin/__tests__/integration/authentication-flow-integration.test.ts:119:28)\n        at Object.<anonymous> (/Users/teroleinonen/software projects/cms-admin/__tests__/integration/authentication-flow-integration.test.ts:149:24)\n\n      171 |       return auditLog\n      172 |     } catch (error) {\n    > 173 |       console.error('Failed to create audit log:', error)\n          |               ^\n      174 |       throw new Error(`Failed to create audit log: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      175 |     }\n      176 |   }\n\n      at AuditService.log (app/lib/audit-service.ts:173:15)\n      at AuditService.logAuth (app/lib/audit-service.ts:188:17)\n      at loginHandler (__tests__/integration/authentication-flow-integration.test.ts:119:28)\n      at Object.<anonymous> (__tests__/integration/authentication-flow-integration.test.ts:149:24)\n\n  console.error\n    Failed to create audit log: ZodError: [\n      {\n        \"origin\": \"string\",\n        \"code\": \"invalid_format\",\n        \"format\": \"uuid\",\n        \"pattern\": \"/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/\",\n        \"path\": [\n          \"userId\"\n        ],\n        \"message\": \"Invalid UUID\"\n      }\n    ]\n        at AuditService.log (/Users/teroleinonen/software projects/cms-admin/app/lib/audit-service.ts:127:51)\n        at AuditService.logAuth (/Users/teroleinonen/software projects/cms-admin/app/lib/audit-service.ts:188:17)\n        at loginHandler (/Users/teroleinonen/software projects/cms-admin/__tests__/integration/authentication-flow-integration.test.ts:204:30)\n        at Object.<anonymous> (/Users/teroleinonen/software projects/cms-admin/__tests__/integration/authentication-flow-integration.test.ts:252:24)\n\n      171 |       return auditLog\n      172 |     } catch (error) {\n    > 173 |       console.error('Failed to create audit log:', error)\n          |               ^\n      174 |       throw new Error(`Failed to create audit log: ${error instanceof Error ? error.message : 'Unknown error'}`)\n      175 |     }\n      176 |   }\n\n      at AuditService.log (app/lib/audit-service.ts:173:15)\n      at AuditService.logAuth (app/lib/audit-service.ts:188:17)\n      at loginHandler (__tests__/integration/authentication-flow-integration.test.ts:204:30)\n      at Object.<anonymous> (__tests__/integration/authentication-flow-integration.test.ts:252:24)\n\nFAIL unit __tests__/integration/authentication-flow-integration.test.ts\n  Authentication Flow Integration Tests\n    Login Flow Integration\n      ✕ should handle complete login flow with session creation and audit logging (100 ms)\n      ✕ should handle failed login attempts with security monitoring (3 ms)\n    Session Management Integration\n      ✕ should handle session validation and renewal (1 ms)\n      ✕ should handle logout with session cleanup\n\n  ● Authentication Flow Integration Tests › Login Flow Integration › should handle complete login flow with session creation and audit logging\n\n    Failed to create audit log: [\n      {\n        \"origin\": \"string\",\n        \"code\": \"invalid_format\",\n        \"format\": \"uuid\",\n        \"pattern\": \"/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/\",\n        \"path\": [\n          \"userId\"\n        ],\n        \"message\": \"Invalid UUID\"\n      }\n    ]\n\n      172 |     } catch (error) {\n      173 |       console.error('Failed to create audit log:', error)\n    > 174 |       throw new Error(`Failed to create audit log: ${error instanceof Error ? error.message : 'Unknown error'}`)\n          |             ^\n      175 |     }\n      176 |   }\n      177 |\n\n      at AuditService.log (app/lib/audit-service.ts:174:13)\n      at AuditService.logAuth (app/lib/audit-service.ts:188:17)\n      at loginHandler (__tests__/integration/authentication-flow-integration.test.ts:119:28)\n      at Object.<anonymous> (__tests__/integration/authentication-flow-integration.test.ts:149:24)\n\n  ● Authentication Flow Integration Tests › Login Flow Integration › should handle failed login attempts with security monitoring\n\n    Failed to create audit log: [\n      {\n        \"origin\": \"string\",\n        \"code\": \"invalid_format\",\n        \"format\": \"uuid\",\n        \"pattern\": \"/^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/\",\n        \"path\": [\n          \"userId\"\n        ],\n        \"message\": \"Invalid UUID\"\n      }\n    ]\n\n      172 |     } catch (error) {\n      173 |       console.error('Failed to create audit log:', error)\n    > 174 |       throw new Error(`Failed to create audit log: ${error instanceof Error ? error.message : 'Unknown error'}`)\n          |             ^\n      175 |     }\n      176 |   }\n      177 |\n\n      at AuditService.log (app/lib/audit-service.ts:174:13)\n      at AuditService.logAuth (app/lib/audit-service.ts:188:17)\n      at loginHandler (__tests__/integration/authentication-flow-integration.test.ts:204:30)\n      at Object.<anonymous> (__tests__/integration/authentication-flow-integration.test.ts:252:24)\n\n  ● Authentication Flow Integration Tests › Session Management Integration › should handle session validation and renewal\n\n    TypeError: Cannot destructure property 'user' of 'undefined' as it is undefined.\n\n      294 |\n      295 |       const sessionHandler = withApiPermissions(\n    > 296 |         async (request: NextRequest, { user: authenticatedUser }) => {\n          |                                              ^\n      297 |           const session = await prisma.session.findFirst({\n      298 |             where: {\n      299 |               userId: authenticatedUser!.id,\n\n      at sessionHandler.permissions.resource (__tests__/integration/authentication-flow-integration.test.ts:296:46)\n      at Object.<anonymous> (__tests__/integration/authentication-flow-integration.test.ts:344:30)\n\n  ● Authentication Flow Integration Tests › Session Management Integration › should handle logout with session cleanup\n\n    TypeError: Cannot destructure property 'user' of 'undefined' as it is undefined.\n\n      365 |\n      366 |       const logoutHandler = withApiPermissions(\n    > 367 |         async (request: NextRequest, { user: authenticatedUser }) => {\n          |                                              ^\n      368 |           const body = await request.json();\n      369 |           \n      370 |           // Deactivate session\n\n      at logoutHandler.skipPermissionCheck (__tests__/integration/authentication-flow-integration.test.ts:367:46)\n      at Object.<anonymous> (__tests__/integration/authentication-flow-integration.test.ts:401:30)\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 4 total\nSnapshots:   0 total\nTime:        1.755 s\nRan all test suites matching __tests__/integration/authentication-flow-integration.test.ts.\n",
        "Error running __tests__/middleware-security-comprehensive.test.ts: Error: Command failed: npm test -- --testPathPatterns=\"__tests__/middleware-security-comprehensive.test.ts\" --verbose --json\nFAIL unit __tests__/middleware-security-comprehensive.test.ts\n  Comprehensive Middleware Security Tests\n    Route Protection Logic\n      Static File Handling\n        ✕ should skip middleware for static file: /_next/static/chunk.js (5 ms)\n        ✕ should skip middleware for static file: /_next/image/logo.png\n        ✕ should skip middleware for static file: /favicon.ico (1 ms)\n        ✕ should skip middleware for static file: /public/image.png (1 ms)\n        ✕ should skip middleware for static file: /robots.txt (1 ms)\n        ✕ should skip middleware for static file: /sitemap.xml\n      Public Route Access\n        ✕ should allow public access to home page: / (3 ms)\n        ✕ should allow public access to login page: /auth/login (1 ms)\n        ✕ should allow public access to registration page: /auth/register\n        ✕ should allow public access to password reset page: /auth/password-reset\n        ✕ should allow public access to health check: /api/health\n        ✕ should allow public access to CSRF token: /api/csrf-token\n        ✕ should allow public access to public products: /api/public/products\n        ✕ should allow public access to NextAuth signin: /api/auth/signin (1 ms)\n        ✕ should allow public access to NextAuth callback: /api/auth/callback/credentials (6 ms)\n      Authentication Required Routes\n        ✕ should require authentication for user profile: /profile (1 ms)\n        ✕ should allow authenticated access to user profile: /profile (2 ms)\n        ✕ should require authentication for user settings: /settings (1 ms)\n        ✕ should allow authenticated access to user settings: /settings (1 ms)\n        ✓ should require authentication for user preferences API: /api/user/preferences (1 ms)\n        ✕ should allow authenticated access to user preferences API: /api/user/preferences (1 ms)\n        ✓ should require authentication for notifications API: /api/notifications (1 ms)\n        ✕ should allow authenticated access to notifications API: /api/notifications (1 ms)\n      Permission-Based Route Protection\n        ✕ should allow ADMIN access to /admin/users (1 ms)\n        ✕ should deny EDITOR access to /admin/users\n        ✕ should deny VIEWER access to /admin/users\n        ✕ should allow ADMIN access to /admin/security (1 ms)\n        ✕ should deny EDITOR access to /admin/security (1 ms)\n        ✕ should deny VIEWER access to /admin/security (1 ms)\n        ✕ should allow ADMIN access to /admin/products (1 ms)\n        ✕ should allow EDITOR access to /admin/products\n        ✕ should deny VIEWER access to /admin/products (1 ms)\n        ✕ should allow ADMIN access to /api/admin/users\n        ✕ should deny EDITOR access to /api/admin/users (2 ms)\n        ✕ should deny VIEWER access to /api/admin/users\n        ✕ should allow ADMIN access to /api/products (1 ms)\n        ✕ should allow EDITOR access to /api/products (1 ms)\n        ✕ should allow VIEWER access to /api/products\n      Dynamic Route Matching\n        ✕ should match dynamic route pattern /admin/products/[id] with /admin/products/123\n        ✕ should match dynamic route pattern /admin/products/[id]/edit with /admin/products/abc-123/edit\n        ✕ should match dynamic route pattern /admin/users/[id] with /admin/users/user-456 (1 ms)\n        ✕ should match dynamic route pattern /api/products/[id] with /api/products/prod-789\n        ✕ should match dynamic route pattern /api/admin/users/[id] with /api/admin/users/admin-user (1 ms)\n    Security Scenarios\n      Authentication Attacks\n        ✕ should handle token manipulation attempts (1 ms)\n        ✕ should handle malformed tokens (2 ms)\n        ✕ should handle expired tokens (1 ms)\n      Authorization Attacks\n        ✕ should detect privilege escalation attempts (1 ms)\n        ✕ should detect role manipulation attempts (1 ms)\n        ✕ should handle concurrent session attacks (3 ms)\n      IP-Based Security\n        ✕ should track suspicious IP behavior\n        ✕ should handle IP spoofing attempts\n      Request Manipulation\n        ✕ should handle path traversal attempts (1 ms)\n        ✕ should handle method override attempts (2 ms)\n      Rate Limiting Security\n        ✕ should apply different rate limits based on route sensitivity (1 ms)\n    Security Headers and Response Handling\n      ✕ should add comprehensive security headers (1 ms)\n      ✕ should add HSTS header in production (1 ms)\n      ✕ should remove sensitive headers (1 ms)\n      ✕ should add request tracking headers (1 ms)\n    Error Response Formats\n      ✕ should return standardized API error responses (1 ms)\n      ✕ should return standardized forbidden responses\n      ✕ should handle web route redirects properly\n    Logging and Monitoring\n      ✕ should log all security events with proper severity (1 ms)\n      ✕ should include comprehensive request metadata in logs (1 ms)\n    Performance and Edge Cases\n      ✕ should handle high concurrent load (14 ms)\n      ✕ should handle memory efficiently with many requests (1 ms)\n      ✕ should handle malformed URLs gracefully (1 ms)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Static File Handling › should skip middleware for static file: /_next/static/chunk.js\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      500 |       },\n      501 |     })\n    > 502 |     response.headers.set('x-request-id', requestId)\n          |              ^\n      503 |     return response\n      504 |   }\n      505 |\n\n      at middleware (middleware.ts:502:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:105:44)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Static File Handling › should skip middleware for static file: /_next/image/logo.png\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      500 |       },\n      501 |     })\n    > 502 |     response.headers.set('x-request-id', requestId)\n          |              ^\n      503 |     return response\n      504 |   }\n      505 |\n\n      at middleware (middleware.ts:502:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:105:44)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Static File Handling › should skip middleware for static file: /favicon.ico\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      500 |       },\n      501 |     })\n    > 502 |     response.headers.set('x-request-id', requestId)\n          |              ^\n      503 |     return response\n      504 |   }\n      505 |\n\n      at middleware (middleware.ts:502:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:105:44)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Static File Handling › should skip middleware for static file: /public/image.png\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      500 |       },\n      501 |     })\n    > 502 |     response.headers.set('x-request-id', requestId)\n          |              ^\n      503 |     return response\n      504 |   }\n      505 |\n\n      at middleware (middleware.ts:502:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:105:44)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Static File Handling › should skip middleware for static file: /robots.txt\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      500 |       },\n      501 |     })\n    > 502 |     response.headers.set('x-request-id', requestId)\n          |              ^\n      503 |     return response\n      504 |   }\n      505 |\n\n      at middleware (middleware.ts:502:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:105:44)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Static File Handling › should skip middleware for static file: /sitemap.xml\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      500 |       },\n      501 |     })\n    > 502 |     response.headers.set('x-request-id', requestId)\n          |              ^\n      503 |     return response\n      504 |   }\n      505 |\n\n      at middleware (middleware.ts:502:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:105:44)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to home page: /\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:16)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to login page: /auth/login\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:16)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to registration page: /auth/register\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:16)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to password reset page: /auth/password-reset\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:16)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to health check: /api/health\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:22)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to CSRF token: /api/csrf-token\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:22)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to public products: /api/public/products\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:22)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to NextAuth signin: /api/auth/signin\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:565:22)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:130:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Public Route Access › should allow public access to NextAuth callback: /api/auth/callback/credentials\n\n    TypeError: expect(received).toBeInstanceOf(expected)\n\n    Matcher error: expected value must be a function\n\n    Expected has type:  object\n    Expected has value: {\"json\": [Function mockConstructor], \"next\": [Function mockConstructor], \"redirect\": [Function mockConstructor]}\n\n      130 |           const response = await middleware(request)\n      131 |           \n    > 132 |           expect(response).toBeInstanceOf(NextResponse)\n          |                            ^\n      133 |           expect(response.status).not.toBe(401)\n      134 |           expect(response.status).not.toBe(403)\n      135 |           expect(mockGetToken).not.toHaveBeenCalled()\n\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:132:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Authentication Required Routes › should require authentication for user profile: /profile\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      752 |   \n      753 |   const response = NextResponse.redirect(loginUrl)\n    > 754 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      755 |   \n      756 |   return response\n      757 | }\n\n      at createUnauthorizedResponse (middleware.ts:754:12)\n      at middleware (middleware.ts:593:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:159:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Authentication Required Routes › should allow authenticated access to user profile: /profile\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:176:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Authentication Required Routes › should require authentication for user settings: /settings\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      752 |   \n      753 |   const response = NextResponse.redirect(loginUrl)\n    > 754 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      755 |   \n      756 |   return response\n      757 | }\n\n      at createUnauthorizedResponse (middleware.ts:754:12)\n      at middleware (middleware.ts:593:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:159:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Authentication Required Routes › should allow authenticated access to user settings: /settings\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:176:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Authentication Required Routes › should allow authenticated access to user preferences API: /api/user/preferences\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:20)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:176:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Authentication Required Routes › should allow authenticated access to notifications API: /api/notifications\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:20)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:176:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow ADMIN access to /admin/users\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny EDITOR access to /admin/users\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      794 |   \n      795 |   const response = NextResponse.redirect(errorUrl)\n    > 796 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      797 |   \n      798 |   return response\n      799 | }\n\n      at createForbiddenResponse (middleware.ts:796:12)\n      at middleware (middleware.ts:684:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:244:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny VIEWER access to /admin/users\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      794 |   \n      795 |   const response = NextResponse.redirect(errorUrl)\n    > 796 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      797 |   \n      798 |   return response\n      799 | }\n\n      at createForbiddenResponse (middleware.ts:796:12)\n      at middleware (middleware.ts:684:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:244:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow ADMIN access to /admin/security\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny EDITOR access to /admin/security\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      794 |   \n      795 |   const response = NextResponse.redirect(errorUrl)\n    > 796 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      797 |   \n      798 |   return response\n      799 | }\n\n      at createForbiddenResponse (middleware.ts:796:12)\n      at middleware (middleware.ts:684:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:244:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny VIEWER access to /admin/security\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      794 |   \n      795 |   const response = NextResponse.redirect(errorUrl)\n    > 796 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      797 |   \n      798 |   return response\n      799 | }\n\n      at createForbiddenResponse (middleware.ts:796:12)\n      at middleware (middleware.ts:684:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:244:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow ADMIN access to /admin/products\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow EDITOR access to /admin/products\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny VIEWER access to /admin/products\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:244:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow ADMIN access to /api/admin/users\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:20)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny EDITOR access to /api/admin/users\n\n    expect(jest.fn()).toHaveBeenCalledWith(...expected)\n\n    Expected: StringContaining \"[SECURITY_HIGH] FORBIDDEN:\", StringContaining \"Insufficient permissions\"\n    Received: \"[SECURITY_MONITORING]\", \"{\n      \\\"type\\\": \\\"PERMISSION_DENIED\\\",\n      \\\"severity\\\": \\\"MEDIUM\\\",\n      \\\"userId\\\": \\\"user-1\\\",\n      \\\"resource\\\": \\\"admin\\\",\n      \\\"action\\\": \\\"GET\\\",\n      \\\"ipAddress\\\": \\\"192.168.1.1\\\",\n      \\\"userAgent\\\": \\\"test-agent\\\",\n      \\\"details\\\": {\n        \\\"pathname\\\": \\\"/api/admin/users\\\",\n        \\\"reason\\\": \\\"Insufficient permissions for /api/admin/users. Required: [{\\\\\\\"resource\\\\\\\":\\\\\\\"users\\\\\\\",\\\\\\\"action\\\\\\\":\\\\\\\"read\\\\\\\",\\\\\\\"scope\\\\\\\":\\\\\\\"all\\\\\\\"}], User role: EDITOR\\\",\n        \\\"userRole\\\": \\\"EDITOR\\\",\n        \\\"timestamp\\\": \\\"2025-10-07T19:11:06.924Z\\\",\n        \\\"requestId\\\": \\\"req_1759864266924_jmauolsrj\\\"\n      },\n      \\\"metadata\\\": {\n        \\\"requestId\\\": \\\"req_1759864266924_jmauolsrj\\\",\n        \\\"timestamp\\\": \\\"2025-10-07T19:11:06.924Z\\\"\n      }\n    }\"\n\n    Number of calls: 1\n\n      253 |             \n      254 |             // Should log forbidden access\n    > 255 |             expect(consoleLogSpy).toHaveBeenCalledWith(\n          |                                   ^\n      256 |               expect.stringContaining('[SECURITY_HIGH] FORBIDDEN:'),\n      257 |               expect.stringContaining('Insufficient permissions')\n      258 |             )\n\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:255:35)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should deny VIEWER access to /api/admin/users\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:244:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow ADMIN access to /api/products\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow EDITOR access to /api/products\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Permission-Based Route Protection › should allow VIEWER access to /api/products\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:225:30)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Dynamic Route Matching › should match dynamic route pattern /admin/products/[id] with /admin/products/123\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:279:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Dynamic Route Matching › should match dynamic route pattern /admin/products/[id]/edit with /admin/products/abc-123/edit\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:279:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Dynamic Route Matching › should match dynamic route pattern /admin/users/[id] with /admin/users/user-456\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:279:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Dynamic Route Matching › should match dynamic route pattern /api/products/[id] with /api/products/prod-789\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:279:28)\n\n  ● Comprehensive Middleware Security Tests › Route Protection Logic › Dynamic Route Matching › should match dynamic route pattern /api/admin/users/[id] with /api/admin/users/admin-user\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:279:28)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Authentication Attacks › should handle token manipulation attempts\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:294:26)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Authentication Attacks › should handle malformed tokens\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:316:26)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Authentication Attacks › should handle expired tokens\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:325:26)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Authorization Attacks › should detect privilege escalation attempts\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:338:26)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Authorization Attacks › should detect role manipulation attempts\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:354:26)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Authorization Attacks › should handle concurrent session attacks\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n          at async Promise.all (index 0)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:368:27)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › IP-Based Security › should track suspicious IP behavior\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      752 |   \n      753 |   const response = NextResponse.redirect(loginUrl)\n    > 754 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      755 |   \n      756 |   return response\n      757 | }\n\n      at createUnauthorizedResponse (middleware.ts:754:12)\n      at middleware (middleware.ts:593:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:391:11)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › IP-Based Security › should handle IP spoofing attempts\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      752 |   \n      753 |   const response = NextResponse.redirect(loginUrl)\n    > 754 |   response.headers.set('x-request-id', requestId)\n          |            ^\n      755 |   \n      756 |   return response\n      757 | }\n\n      at createUnauthorizedResponse (middleware.ts:754:12)\n      at middleware (middleware.ts:593:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:408:9)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Request Manipulation › should handle path traversal attempts\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:431:28)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Request Manipulation › should handle method override attempts\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:446:26)\n\n  ● Comprehensive Middleware Security Tests › Security Scenarios › Rate Limiting Security › should apply different rate limits based on route sensitivity\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:459:9)\n\n  ● Comprehensive Middleware Security Tests › Security Headers and Response Handling › should add comprehensive security headers\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:481:24)\n\n  ● Comprehensive Middleware Security Tests › Security Headers and Response Handling › should add HSTS header in production\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:504:24)\n\n  ● Comprehensive Middleware Security Tests › Security Headers and Response Handling › should remove sensitive headers\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:515:24)\n\n  ● Comprehensive Middleware Security Tests › Security Headers and Response Handling › should add request tracking headers\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:523:24)\n\n  ● Comprehensive Middleware Security Tests › Error Response Formats › should return standardized API error responses\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:536:24)\n\n  ● Comprehensive Middleware Security Tests › Error Response Formats › should return standardized forbidden responses\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:561:24)\n\n  ● Comprehensive Middleware Security Tests › Error Response Formats › should handle web route redirects properly\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:575:24)\n\n  ● Comprehensive Middleware Security Tests › Logging and Monitoring › should log all security events with proper severity\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:614:9)\n\n  ● Comprehensive Middleware Security Tests › Logging and Monitoring › should include comprehensive request metadata in logs\n\n    TypeError: Cannot read properties of undefined (reading 'headers')\n\n      813 |\n      814 |   // Add comprehensive security headers\n    > 815 |   response.headers.set('X-Content-Type-Options', 'nosniff')\n          |            ^\n      816 |   response.headers.set('X-Frame-Options', 'DENY')\n      817 |   response.headers.set('X-XSS-Protection', '1; mode=block')\n      818 |   response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')\n\n      at applySecurityAndPreferences (middleware.ts:815:12)\n      at middleware (middleware.ts:713:14)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:632:7)\n\n  ● Comprehensive Middleware Security Tests › Performance and Edge Cases › should handle high concurrent load\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n          at async Promise.all (index 0)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:665:25)\n\n  ● Comprehensive Middleware Security Tests › Performance and Edge Cases › should handle memory efficiently with many requests\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:687:9)\n\n  ● Comprehensive Middleware Security Tests › Performance and Edge Cases › should handle malformed URLs gracefully\n\n    TypeError: server_1.NextResponse is not a constructor\n\n      507 |   if (isIPBlocked(ip)) {\n      508 |     await logSecurityEvent(null, pathname, 'BLOCKED', 'ip_blocked', ip, userAgent, logMetadata)\n    > 509 |     return new NextResponse('Access Denied', { status: 403 })\n          |            ^\n      510 |   }\n      511 |\n      512 |   // Apply rate limiting based on route sensitivity\n\n      at middleware (middleware.ts:509:12)\n      at Object.<anonymous> (__tests__/middleware-security-comprehensive.test.ts:706:26)\n\nTest Suites: 1 failed, 1 total\nTests:       64 failed, 2 passed, 66 total\nSnapshots:   0 total\nTime:        1.643 s\nRan all test suites matching __tests__/middleware-security-comprehensive.test.ts.\n"
      ]
    },
    {
      "testSuite": "Permission System Security",
      "passed": 0,
      "failed": 3,
      "skipped": 0,
      "duration": 8581,
      "vulnerabilities": [],
      "errors": [
        "Error running __tests__/lib/permissions.test.ts: SyntaxError: Unexpected token '>', \"\n> kin-work\"... is not valid JSON",
        "Error running __tests__/lib/enhanced-permissions.test.ts: SyntaxError: Unexpected token '>', \"\n> kin-work\"... is not valid JSON",
        "Error running __tests__/integration/permission-system.test.ts: SyntaxError: Unexpected token '>', \"\n> kin-work\"... is not valid JSON"
      ]
    }
  ],
  "summary": {
    "criticalIssues": 0,
    "highRiskIssues": 0,
    "mediumRiskIssues": 0,
    "lowRiskIssues": 0
  },
  "recommendations": [
    "Fix failing security tests to ensure proper protection"
  ]
}