name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'
  # Set a consistent memory limit for all Node.js processes
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # ======================================================================================
  # Job 1: Lint and Type Check
  # ======================================================================================
  quality-checks:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npx prettier --check .

  # ======================================================================================
  # Job 2: Unit Tests
  # ======================================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:ci

      - name: Run unit tests
        run: node scripts/fast-test-runner.js unit --coverage
        env:
          NODE_ENV: test

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  # ======================================================================================
  # Job 3: Integration Tests
  # ======================================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cms_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:ci

      - name: Setup test database
        run: npm run test:db:setup
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/cms_test
          NODE_ENV: test

      - name: Run integration tests
        run: node scripts/fast-test-runner.js integration --coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/cms_test
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NEXTAUTH_URL: http://localhost:3001

      - name: Upload integration test coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-coverage
          path: coverage/
          retention-days: 7

  # ======================================================================================
  # Job 4: Coverage Processing
  # ======================================================================================
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:ci

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports

      - name: Combine coverage reports
        run: |
          # The coverage reports from different jobs are in subdirectories
          # e.g., coverage-reports/unit-test-coverage/coverage-final.json
          # We need to merge them. For now, we'll just use the reports as is for now
          # and upload to codecov.
          # A proper merge would use `nyc merge` or similar tools.
          # Let's just prepare the files for Codecov.
          mkdir -p coverage
          find coverage-reports -name 'clover.xml' -exec cp {} coverage/ \;

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          # files: ./coverage/clover.xml # Let codecov find the files
          # directory: ./coverage/
          fail_ci_if_error: true
          
  # ======================================================================================
  # Job 5: Build Verification
  # ======================================================================================
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          # Provide dummy env vars for build
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3001

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # ======================================================================================
  # Job 6: Security Scan
  # ======================================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:ci

      - name: Run dependency vulnerability check
        run: npx audit-ci --moderate

  # ======================================================================================
  # Job 7: CI Status Summary
  # ======================================================================================
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, coverage, build, security]
    if: always() # This job should always run to report the status
    steps:
      - name: Generate CI summary
        run: |
          echo "# Continuous Integration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job                 | Status                                       |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------------|----------------------------------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint and Type Check | ${{ needs.quality-checks.result }}           |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests          | ${{ needs.unit-tests.result }}               |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests   | ${{ needs.integration-tests.result }}        |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Coverage       | ${{ needs.coverage.result }}                 |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification  | ${{ needs.build.result }}                    |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan       | ${{ needs.security.result }}                 |" >> $GITHUB_STEP_SUMMARY
          
          # Check if all critical jobs passed
          if [[ "${{ needs.quality-checks.result }}" == "success" &&
                "${{ needs.unit-tests.result }}" == "success" &&
                "${{ needs.integration-tests.result }}" == "success" &&
                "${{ needs.coverage.result }}" == "success" &&
                "${{ needs.build.result }}" == "success" &&
                "${{ needs.security.result }}" == "success" ]]; then
            echo -e "\n\n✅ All checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo -e "\n\n❌ One or more checks failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # ======================================================================================
  # Job 8: Trigger Deployment
  # ======================================================================================
  trigger-deployment:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    needs: ci-status
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger deployment workflow
        run: |
          echo "CI passed on main branch. Triggering deployment..."
          # This would typically trigger the deployment-gate.yml workflow.
          # For now, we'll just log a message. A real implementation would use
          # `gh workflow run deployment-gate.yml` or a repository_dispatch event.
          echo "Deployment would be triggered here."
