name: Memory-Optimized CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NODE_OPTIONS: '--max-old-space-size=2048'

jobs:
  # Job 1: Code Quality and Memory-Optimized Tests
  quality-and-tests:
    name: Quality & Memory-Optimized Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npm run type-check
        
      - name: Run memory-optimized tests
        run: npm run test:memory-config
        env:
          NODE_ENV: test
          NEXTAUTH_SECRET: test-secret-key-for-ci
          NEXTAUTH_URL: http://localhost:3001
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Job 2: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: quality-and-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Generate Prisma client
        run: npm run db:generate
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3001
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # Job 3: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-and-tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run security audit
        run: npm audit --audit-level=moderate || true
        
      - name: Check for high/critical vulnerabilities
        run: |
          if npm audit --audit-level=high --json | jq -e '.vulnerabilities | length > 0' > /dev/null 2>&1; then
            echo "High or critical vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          else
            echo "No high or critical vulnerabilities found."
          fi

  # Job 4: Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [quality-and-tests, build, security]
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "- Quality & Tests: ${{ needs.quality-and-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if all critical jobs passed
          if [[ "${{ needs.quality-and-tests.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ All critical checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some critical checks failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Job 5: Deployment Gate
  deployment-gate:
    name: Deployment Gate
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deployment ready
        run: |
          echo "🚀 All checks passed! Ready for deployment."
          echo "DEPLOYMENT_READY=true" >> $GITHUB_ENV